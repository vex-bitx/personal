<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Paco Coursey]]></title>
        <description><![CDATA[Paco Coursey]]></description>
        <link>https://paco.im</link>
        <image>
            <url>https://paco.im/og.png</url>
            <title>Paco Coursey</title>
            <link>https://paco.im</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 19 Mar 2020 15:49:12 GMT</lastBuildDate>
        <atom:link href="https://paco.im/feed.xml" rel="self" type="application/rss+xml"/>
        <language><![CDATA[en]]></language>
        <item>
            <title><![CDATA[Better Next.js Imports]]></title>
            <description><![CDATA[<p>Relative import statements are a pain. To avoid <code>../</code> chains, improve code portability, and type less, I&#39;ve started using <a href="https://github.com/tleunen/babel-plugin-module-resolver" target="_blank" rel="noopener noreferrer"><code>babel-plugin-module-resolver</code></a> in my Next.js projects.</p>
<p>The goal is to transform verbose import statements like this:</p>
<pre><code class="language-js">import Button from &#39;../../../../components/button&#39;</code></pre>
<p>into absolute import statements that work anywhere in your project:</p>
<pre><code class="language-js">import Button from &#39;@components/button&#39;</code></pre>
<p>Let&#39;s do it. Install the babel plugin as a <code>devDependency</code>:</p>
<pre><code class="language-bash">$ yarn add babel-plugin-module-resolver -D</code></pre>
<p>In the root of your Next.js project, create a <code>.babelrc.json</code> file and add the <code>module-resolver</code> plugin:</p>
<pre><code class="language-js">module.exports = {
  presets: [&#39;next/babel&#39;],
  plugins: [
    [
      &#39;module-resolver&#39;,
      {
        alias: {
          &#39;@components&#39;: &#39;./components&#39;
        }
      }
    ]
  ]
}</code></pre>
<p>Create a <code>jsconfig.json</code> (or <code>tsconfig.json</code> if you&#39;re using TypeScript) and add the <code>paths</code> property:</p>
<pre><code class="language-json">{
  &quot;compilerOptions&quot;: {
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@components/*&quot;: [&quot;components/*&quot;]
    }
  }
}</code></pre>
<p>Note that the syntax is slightly different than the babel config.</p>
<p>If you&#39;re using a mixed JS/TS codebase, you should include JS files in your <code>tsconfig.json</code>:</p>
<pre><code class="language-json">{
  &quot;include&quot;: [&quot;**/*.ts&quot;, &quot;**/*.tsx&quot;, &quot;**/*.js&quot;, &quot;**/*.jsx&quot;]
}</code></pre>
<p>Now you can update your import statements to use the new syntax!</p>
<hr>
<p>You don&#39;t have to use <code>@</code> as the prefix, that&#39;s simply my preference. You can make it fully absolute (<code>import Button from &#39;components/button&#39;</code>) or use another prefix (<code>import Button from &#39;$$components/button&#39;</code>).</p>
<p>Editors like VSCode automatically support the config in <code>jsconfig.json</code>, so Command+Click to jump to the source of a file will work as usual. <a href="https://github.com/tleunen/babel-plugin-module-resolver#editors-autocompletion" target="_blank" rel="noopener noreferrer">Atom and IntelliJ</a> also have support for rewrites.</p>
]]></description>
            <link>https://paco.im/blog/better-nextjs-imports</link>
            <guid isPermaLink="false">https://paco.im/blog/better-nextjs-imports</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Sun, 15 Mar 2020 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Custom text underlines]]></title>
            <description><![CDATA[<p>The <code>text-decoration: underline</code> CSS property provides insufficient control over the underline styling and position. While we wait for the <a href="https://www.w3.org/TR/css-text-decor-4/" target="_blank" rel="noopener noreferrer">CSS Text Decoration Module specification</a> to become standard, we must rely on custom implementations.</p>
<p>My favorite approach is to use a <code>linear-gradient</code> to create an underline:</p>
<pre><code class="language-css">background-image: linear-gradient(gray, gray);
background-size: 100% 1px;
background-position: left bottom;
background-repeat: no-repeat;</code></pre>
<div class="l">
  <div>
    <span>Day by day, what you do is what you become.</span>
  </div>
</div>

<h2 id="position">Position</h2>
<p>Position the underline by changing the vertical value of <code>background-position</code>:</p>
<pre><code class="language-css">background-position: left 1.05em;</code></pre>
<div class="l _2">
  <div>
    <span>Day by day, what you do is what you become.</span>
  </div>
</div>

<h2 id="descenders">Descenders</h2>
<p>You&#39;ll notice that the underline overlaps the <a href="https://www.figma.com/dictionary/descender/" target="_blank" rel="noopener noreferrer">descenders</a> of the text. By adding a <code>text-shadow</code> with a small offset to the right and left with the color of the background, you can hide the underline around descenders.</p>
<pre><code class="language-css">text-shadow: 0.1em 0 var(--background), -0.1em 0 var(--background);</code></pre>
<div class="l _2 _3">
  <div>
    <span>Day by day, what you do is what you become.</span>
  </div>
</div>

<p>Remember to set <code>text-shadow: none</code> in your <code>::selection</code> rules.</p>
<h2 id="weight">Weight</h2>
<p>Change the height of the background to increase the underline weight:</p>
<pre><code class="language-css">background-size: 100% 0.25em;</code></pre>
<div class="l _4">
  <div>
    <span>Day by day, what you do is what you become.</span>
  </div>
</div>

<h2 id="dashes">Dashes</h2>
<p>By using a <code>repeating-linear-gradient</code> and leaving half the gradient transparent, you can customize a dashed underline:</p>
<pre><code class="language-css">background-image: repeating-linear-gradient(
  to right,
  var(--gray) 0%,
  var(--gray) 50%,
  transparent 50%,
  transparent 100%
);
background-size: 1ch 1px;</code></pre>
<div class="l _5">
  <div>
    <span>Day by day, what you do is what you become.</span>
  </div>
</div>

<p>Change the horizontal value of <code>background-size</code> to modify the dash width:</p>
<pre><code class="language-css">background-size: 5ch 1px;</code></pre>
<div class="l _5 _6">
  <div>
    <span>Day by day, what you do is what you become.</span>
  </div>
</div>

<p>The <code>ch</code> unit is equal to the width of the &quot;0&quot; glyph in the current font, which can be useful for natural alignment.</p>
<h2 id="wrapping">Wrapping</h2>
<p>Lastly, this approach also supports multi-line text:</p>
<div class="l">
  <div>
    <span>Day by day,<br /> what you do is what you become.</span>
  </div>
</div>

<p><a href="https://twitter.com/pacocoursey" target="_blank" rel="noopener noreferrer">Let me know</a> if you end up using this, or read more about other approaches in &quot;<a href="https://medium.design/crafting-link-underlines-on-medium-7c03a9274f9" target="_blank" rel="noopener noreferrer">Crafting link underlines on Medium.</a>&quot;</p>
<hr>
<p>Thanks to <a href="https://twitter.com/arzafran" target="_blank" rel="noopener noreferrer">Franco</a> for reminding me about this technique!</p>
<style>

.l {
  background: var(--lighter-gray);
  width: 100%;
  height: 100px;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: var(--radius);
  font-size: 1.25rem;
  color: var(--fg);
  text-align: center;
}

.l span {
  background-image: linear-gradient(var(--gray), var(--gray));
  background-size: 100% 1px;
  background-position: left bottom;
  background-repeat: no-repeat;
}

.l._2 span {
  background-position: left 1.05em;
}

.l._3 span {
  text-shadow: 0.1em 0 var(--lighter-gray), -0.1em 0 var(--lighter-gray);
}

.l._4 span {
  background-size: 100% 0.25em;
}

.l._5 span {
  background: repeating-linear-gradient(
    to right,
    var(--gray) 0%,
    var(--gray) 50%,
    transparent 50%,
    transparent 100%
  );
  background-repeat: repeat-x;
  background-size: 1ch 1px;
  background-position: bottom left;
}


.l._6 span {
  background-size: 2ch 1px;
}
</style>
]]></description>
            <link>https://paco.im/blog/custom-text-underlines</link>
            <guid isPermaLink="false">https://paco.im/blog/custom-text-underlines</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Tue, 11 Feb 2020 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Thoughtless]]></title>
            <description><![CDATA[<p>I have trouble falling asleep. Too many ideas and thoughts from a day with too little activity, I suspect. Writing down my thoughts helps me clear my mind.</p>
<p><a href="https://thoughtless.now.sh" target="_blank" rel="noopener noreferrer">Thoughtless</a> is an experiment, created on a sleepless night, to help me note my thoughts without interruption.</p>
<p>By making each typed word disappear, there is no overediting or obsessing over sentence structure. Record your raw thoughts â€” no going back.</p>
<p>When you finish, copy and paste your writing somewhere safe and sleep well.</p>
]]></description>
            <link>https://paco.im/blog/be-thoughtless</link>
            <guid isPermaLink="false">https://paco.im/blog/be-thoughtless</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Tue, 21 Jan 2020 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Styled System with styled-jsx]]></title>
            <description><![CDATA[<p><a href="https://styled-system.com/" target="_blank" rel="noopener noreferrer">Styled System</a> is an excellent alternative to writing ad-hoc <code>style</code> declarations in your React components. By giving components standardized props like <code>bg</code> and <code>fontSize</code>, it&#39;s easier to build custom UI that respects your system constraints. That&#39;s because you can quickly specify your design tokens and use them in real code:</p>
<pre><code class="language-js">// theme.js
colors: {
  blue: &#39;#0070F3&#39;
}

// your React code
&lt;Box color=&quot;blue&quot; /&gt;</code></pre>
<p>Styled System&#39;s responsive syntax is impressively concise, too:</p>
<pre><code class="language-js">// 16px on mobile, 14px on tablet, 12px on desktop
&lt;Box fontSize={[16, 14, 12]} /&gt;</code></pre>
<p>These two features make it extremely easy to scaffold new components.</p>
<p>I want to use Styled System with <a href="https://github.com/zeit/styled-jsx" target="_blank" rel="noopener noreferrer">styled-jsx</a>, because styled-jsx is included with <a href="https://github.com/zeit/next.js" target="_blank" rel="noopener noreferrer">Next.js</a>, and I use Next.js for everything React. But all the Styled System tooling I found was for styled-components or Emotion, so I made my own.</p>
<h2 id="styled-jsx-system">styled-jsx-system</h2>
<p><a href="https://github.com/pacocoursey/styled-jsx-system" target="_blank" rel="noopener noreferrer">styled-jsx-system</a> lets you use Styled System with styled-jsx.</p>
<pre><code class="language-bash">$ yarn add styled-jsx-system</code></pre>
<p>Wrap your components with the provided HOC and accept a <code>className</code> prop:</p>
<pre><code class="language-js">import withStyledSystem from &#39;styled-jsx-system&#39;
import { color } from &#39;styled-system&#39;

const Box = ({ className, children }) =&gt; {
  return (
    &lt;div className={className}&gt;
      {children}

      &lt;style jsx&gt;{`
        div {
          padding: 8px;
        }
      `}&lt;/style&gt;
    &lt;/div&gt;
  )
}

export default withStyledSystem(Box, [color])</code></pre>
<p>That&#39;s it! You can now use Styled System props with your Box component:</p>
<pre><code class="language-js">&lt;Box color={[&#39;#000&#39;, &#39;#666&#39;, &#39;#fff&#39;]}&gt;Hello&lt;/Box&gt;</code></pre>
<p>Other Styled System features like compose, system, and themeing are supported too. Check out the <a href="https://github.com/pacocoursey/styled-jsx-system" target="_blank" rel="noopener noreferrer">repository</a> for more information.</p>
<p>Cool. <a href="https://twitter.com/pacocoursey" target="_blank" rel="noopener noreferrer">Let me know</a> if you end up using it.</p>
<hr>
<p>Thanks to <a href="https://twitter.com/jxnblk" target="_blank" rel="noopener noreferrer">jxnblk</a> for Styled System and all his cool CSS experiments, and thanks to <a href="https://twitter.com/giuseppegurgone" target="_blank" rel="noopener noreferrer">Giuseppe</a>, <a href="https://twitter.com/_ijjk" target="_blank" rel="noopener noreferrer">JJ</a>, and <a href="https://twitter.com/shuding_" target="_blank" rel="noopener noreferrer">Shu</a> for help with compiling and publishing!</p>
]]></description>
            <link>https://paco.im/blog/styled-jsx-system</link>
            <guid isPermaLink="false">https://paco.im/blog/styled-jsx-system</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Sat, 21 Dec 2019 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Write it down]]></title>
            <description><![CDATA[<p>My crappy superpower is solving difficult problems as I&#39;m falling asleep. Doesn&#39;t sound too bad, right? Here&#39;s the catch: I always convince myself I don&#39;t need to write the solution down.</p>
<p>It&#39;s 1:18 AM. I just figured it out. The answer is so simple, I can&#39;t believe it took me this long. Do I blind myself opening my phone to write it down? No, I can finally sleep now! There&#39;s no way I&#39;ll forget.</p>
<p>It&#39;s 8:32 AM. I can&#39;t believe I&#39;ve done this again.</p>
<hr>
<p>I have a new policy: <strong>write it down.</strong> Every single time. No matter if the idea comes to me in the shower, the middle of a dream, or in a conversation.</p>
<p>Most of my ideas are bad. But this way I&#39;ll never miss an opportunity.</p>
]]></description>
            <link>https://paco.im/blog/write-it-down</link>
            <guid isPermaLink="false">https://paco.im/blog/write-it-down</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Tue, 19 Nov 2019 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[On Gaming]]></title>
            <description><![CDATA[<p>A favorite quote from an old friend.</p>
<blockquote>

<p>I really admire that there are people of all ages that are able to get along, without awkwardness, without serious fighting, and share a common interest, whilst in completely different parts of the world.</p>
<p>I mean, isn&#39;t it just amazing that we all have a different background, a different upbringing, a different future, and yet we all united at this point in time to share an interest, as futile as it may seem, and be passionate about it?</p>
<p><strong>What a life!</strong></p>
<p>â€” Giles</p>
</blockquote>
]]></description>
            <link>https://paco.im/blog/on-gaming</link>
            <guid isPermaLink="false">https://paco.im/blog/on-gaming</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Sat, 16 Nov 2019 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Good Code]]></title>
            <description><![CDATA[<p>I find great satisfaction in writing beautiful code. Very few will ever see this effort and appreciate it, but it is deeply gratifying. We can tell whether our code is high quality. We can predict how often and when it will need to be revisited, whether our coworkers can easily understand it, whether it is easy to use and extend, and whether it meets our personal standards of completeness and correctness.</p>
<p>This type of creative output is quickly becoming more important to me. It is a different type of aesthetic, less superficial and more fulfilling.</p>
<p>I like to think of good code as the walls on which many coats of paint will be applied.</p>
<p>Good code should outlast us, when many designs will not.</p>
<p>It&#39;s almost ethical â€” deeply considering how we leave the codebase for our future selves or others.</p>
]]></description>
            <link>https://paco.im/blog/good-code</link>
            <guid isPermaLink="false">https://paco.im/blog/good-code</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Sat, 02 Nov 2019 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Good Writers]]></title>
            <description><![CDATA[<p>Have you noticed that some people write extremely well? Take Aaron Swartz&#39; article <a href="http://www.aaronsw.com/weblog/dweck" target="_blank" rel="noopener noreferrer">&quot;Believe you can change&quot;</a>:</p>
<blockquote>
<p>Carol Dweck was obsessed with failure.</p>
</blockquote>
<p>What an <em>amazing</em> first sentence. I&#39;m immediately glued to this article. Who is Carol Dweck? What&#39;s wrong with her?</p>
<p>If I were writing that, I&#39;d start with the immediately boring:</p>
<blockquote>
<p>Carol Dweck is a Professor of Psychology at Stanford, studying the behavior of children and how they deal with failure.</p>
</blockquote>
<p>Because I have a lot of practice writing in this dull manner that meets school requirements. But I&#39;m already bored reading it.</p>
<p>I&#39;m learning to recognize good writing, and I&#39;m fascinated. We all use the same set of words, but some writers are so much better at using them.</p>
]]></description>
            <link>https://paco.im/blog/good-writers</link>
            <guid isPermaLink="false">https://paco.im/blog/good-writers</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Thu, 24 Oct 2019 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Creative Output]]></title>
            <description><![CDATA[<p>I am consistently unhappy with my creative output. My job title includes designer, but I&#39;m not good at designing something from scratch.</p>
<p>None of work I create matches up to the work of designers that I admire. At a minimum, I want to feel more comfortable designing work that meets my own minimum expectations of quality. <a href="https://en.wikipedia.org/wiki/Impostor_syndrome" target="_blank" rel="noopener noreferrer">Impostor Syndrome</a> probably plays a big part (especially working with such talented colleagues!) but maybe I simply need practice.</p>
<p>Creativity is not my strong suit. I&#39;m logical. Building on past experience to improve future work is something I am good at. Creating something new is not. That&#39;s why it feels like everything I create is a remix of my past work, or the work of others.</p>
<p>Does this still count as <em>my</em> creative output, though? I&#39;d argue that anything new in design is just old stuff reworked in new ways. Buried in sarcasm, <a href="https://twitter.com/markdalgleish/status/1084256955961466881" target="_blank" rel="noopener noreferrer">Mark Dalgleish</a> explains that step in the design process:</p>
<blockquote>
<p>If you&#39;re a developer who finds design difficult, you&#39;re probably skipping the &quot;inspiration&quot; phaseâ€”which, in non-designer speak, roughly translates to &quot;look at other designs and rip off all the good ideas&quot;.</p>
</blockquote>
<p>This is a totally valid way to work. It&#39;s probably the most efficient. You&#39;re not the first person working on your problems, so use what other people have already discovered. But to what degree can we claim this work as our own?</p>
]]></description>
            <link>https://paco.im/blog/creative</link>
            <guid isPermaLink="false">https://paco.im/blog/creative</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Mon, 19 Aug 2019 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Persistent Custom App Icons]]></title>
            <description><![CDATA[<p>I created <a href="https://dusk.now.sh" target="_blank" rel="noopener noreferrer">Dusk</a> to make my dock look more visually harmonious. <a href="https://freemacsoft.net/liteicon/" target="_blank" rel="noopener noreferrer">LiteIcon</a> does a great job of automating the icon changing process, but every time I opened Discord, the dock icon reverted back to default. Not cool.</p>
<p><img src="https://paco.im/blog/persistent-icons/dock-1.png" alt="Original Discord Icon in Dock"></p>
<p>It happens to other Electron applications (Hyper, VSCode) over time. Even Safari reverts back occasionally. It&#39;s frustratingly ugly. Let&#39;s fix it.</p>
<p>Find the application in Finder and right click to &quot;Show Package Contents&quot;.</p>
<p><img src="https://paco.im/blog/persistent-icons/show.png" alt="Show Package Contents on Discord.app"></p>
<p>Navigate to <code>Contents/Resources/</code>. Here, <code>electron.icns</code> is the culprit. Let&#39;s replace it with our custom icon.</p>
<p><img src="https://paco.im/blog/persistent-icons/icns.png" alt="electron.icns in Contents/Resources Folder"></p>
<p>We&#39;ll need to convert our custom <code>.png</code> icon from Dusk (or anywhere else) to an <code>.icns</code> file. MacOS ships with the command line tool <code>sips</code> to help with this.</p>
<p>Run the following from the command line, replacing ICON as needed.</p>
<pre><code class="language-bash">sips -s format icns ICON.png --out ICON.icns</code></pre>
<p>Move your new <code>.icns</code> file into the previously opened <code>Resources/</code> folder. I like to save the old icon by renaming it, just in case I have to revert later. Rename your new file to match the old (in this case, <code>electron.icns</code>).</p>
<p><img src="https://paco.im/blog/persistent-icons/fixed-icns.png" alt="New electron.icns File"></p>
<p>Restart the app, and your custom application icon should persist!</p>
<p><img src="https://paco.im/blog/persistent-icons/dock-2.png" alt="Much better"></p>
]]></description>
            <link>https://paco.im/blog/persistent-icons</link>
            <guid isPermaLink="false">https://paco.im/blog/persistent-icons</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Sat, 30 Mar 2019 06:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Understanding package.json]]></title>
            <description><![CDATA[<p>I began my Computer Science degree with an intensive introduction course in C. We used makefiles to compile and run each of our assignments.</p>
<p>When I started learning modern web development in early 2018, I had no idea what Node.js or NPM was. My idea of building website involved writing HTML, CSS, and occasionally including a <code>script</code> tag. A year or so later, I&#39;m finally comfortable with modern techniques.</p>
<p>A major source of confusion for me was <code>package.json</code>. In short, <code>package.json</code> is a makefile for the JavaScript environment, with some caveats.</p>
<h3 id="package-scripts">Package Scripts</h3>
<p>Package managers like Yarn and NPM also serve as script runners for JavaScript projects. Unlike makefiles, scripts in <code>package.json</code> run in a special environment.</p>
<p>Packages in <code>node_modules</code> that define an executable will have that executable appended to the environment PATH before running any scripts. This can be confusing. Let&#39;s see an example:</p>
<pre><code class="language-json">&quot;devDependencies&quot;: {
  &quot;eslint&quot;: &quot;1.0.0&quot;
},
&quot;scripts&quot;: {
  &quot;lint&quot;: &quot;eslint .&quot;
}</code></pre>
<p>Running <code>yarn lint</code> will work correctly. However, just running <code>eslint .</code> from the command line will fail!<sup>1</sup> This was extremely confusing at first, did I have  ESLint installed or not?</p>
<p>The package script will work because Yarn recognizes that the ESLint dependency includes an executable, and appends it to the environment PATH when running any scripts.</p>
<p>This is a great advantage of the modular nature of the JavaScript ecosystem. You don&#39;t have to install any global scripts or clutter up your PATH to work with JavaScript projects, just <code>yarn install</code>.</p>
<hr>
<ol>
<li>Unless you have installed ESLint globally, which does add the executable to your PATH (<code>yarn global add eslint</code>)</li>
</ol>
]]></description>
            <link>https://paco.im/blog/understanding-package-json</link>
            <guid isPermaLink="false">https://paco.im/blog/understanding-package-json</guid>
            <dc:creator><![CDATA[Paco Coursey]]></dc:creator>
            <pubDate>Mon, 11 Mar 2019 06:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>